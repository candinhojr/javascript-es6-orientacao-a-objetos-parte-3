{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HTTPService","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","then","negociacoes","periodos","reduce","arrayAchatado","array","concat","catch","Error","erro","get","map","Negociacao","Date","objeto","data","quantidade","valor","console","log","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEqual","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\n\n    /**\n     * Esta classe centraliza operações que realizamos com nosso back-end, mais notadamente aquelas que buscam negociações. \n     * Ela também serve para encapsular o uso de outra classe que criamos, a HttpService\n     */\n    constructor() {\n        \n        this._http = new HTTPService();\n    }\n\n    obterNegociacoes() {\n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()    \n        ]).then(periodos => {\n            let negociacoes = periodos\n                .reduce((arrayAchatado, array) => \n                    arrayAchatado.concat(array), []);\n            return negociacoes;\n        }).catch(erro => {\n            throw new Error(erro);\n        });\n    }\n\n    obterNegociacoesDaSemana() {\n\n        return this._http\n            .get('negociacoes/semana')\n            .then(negociacoes => {\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))\n                // o parse me retorna uma lista de objetos, e para cada objeto dentro dessa lista eu converto esse objeto em uma instância de Negociacao.\n            })\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações da semana');\n            });\n    }\n\n    obterNegociacoesDaSemanaAnterior() {\n\n        return this._http\n            .get('negociacoes/anterior')\n            .then(negociacoes => {\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))\n            })\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações da semana anterior');\n            });\n    }\n\n    obterNegociacoesDaSemanaRetrasada() {\n\n        return this._http\n            .get('negociacoes/retrasada')\n            .then(negociacoes => {\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor))\n            })\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações da semana retrasada');\n            });\n    }\n    \n    cadastra(negociacao) {\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => 'Negociação adicionada com sucesso')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível adicionar a negociação')\n            })\n    }\n\n    lista() {\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.listaTodos())\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações')\n            })\n    }\n\n    apaga() {\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.apagaTodos())\n            .then(() => 'Negociações apagadas com sucesso')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível apagar as negociações')\n            })\n    }\n\n    importa(listaAtual) {\n\n        return this.obterNegociacoes()\n            .then(negociacoes => \n                negociacoes.filter(negociacao => \n                    !listaAtual.some(negociacaoExistente =>\n                        negociacao.isEqual(negociacaoExistente)))\n            )\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível buscar as negociações para importar')\n            })\n    }\n}"]}