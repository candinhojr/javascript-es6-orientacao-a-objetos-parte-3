{"version":3,"sources":["../../app-es6/services/ProxyFactory.js"],"names":["ProxyFactory","objeto","props","acao","Proxy","get","target","prop","receiver","includes","_ehFuncao","retorno","Reflect","apply","arguments","set","value","func","Function"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCAAaA,Y;;;;;;;2CAEKC,M,EAAQC,K,EAAOC,I,EAAM;;AAE/B;AACA,+BAAO,IAAIC,KAAJ,CAAUH,MAAV,EAAkB;AAKrBI,+BALqB,eAKjBC,MALiB,EAKTC,IALS,EAKHC,QALG,EAKO;;AAExB;;;;;AAKA;AACA,oCAAGN,MAAMO,QAAN,CAAeF,IAAf,KAAwBP,aAAaU,SAAb,CAAuBJ,OAAOC,IAAP,CAAvB,CAA3B,EAAiE;AAC7D;AACA,2CAAO,YAAW;;AAEd;AACA;AACA,4CAAII,UAAUC,QAAQC,KAAR,CAAcP,OAAOC,IAAP,CAAd,EAA4BD,MAA5B,EAAoCQ,SAApC,CAAd;AACA;AACAX,6CAAKG,MAAL;;AAEA,+CAAOK,OAAP;AACH,qCATD;AAUH;;AAED,uCAAOC,QAAQP,GAAR,CAAYC,MAAZ,EAAoBC,IAApB,EAA0BC,QAA1B,CAAP;AACH,6BA5BoB;AA8BrBO,+BA9BqB,eA8BjBT,MA9BiB,EA8BTC,IA9BS,EA8BHS,KA9BG,EA8BIR,QA9BJ,EA8Bc;;AAE/B,oCAAIG,UAAUC,QAAQG,GAAR,CAAYT,MAAZ,EAAoBC,IAApB,EAA0BS,KAA1B,EAAiCR,QAAjC,CAAd;AACA;AACA,oCAAGN,MAAMO,QAAN,CAAeF,IAAf,CAAH,EAAyBJ,KAAKG,MAAL;AACzB,uCAAOK,OAAP;AACH;AApCoB,yBAAlB,CAAP;AAsCH;;;8CAEgBM,I,EAAM;AACnB,+BAAO,QAAOA,IAAP,yCAAOA,IAAP,cAAuBC,QAAvB,yCAAuBA,QAAvB,EAAP;AACH","file":"ProxyFactory.js","sourcesContent":["export class ProxyFactory {\n\n    static create(objeto, props, acao) {\n        \n        // Proxy recebe 2 parâmetros, a instância que ele quer 'imitar' e o handler que conterá as armadilhas\n        return new Proxy(objeto, {\n            \n            // HANDLER\n            // o get vai ser chamado toda a vez que eu acessar alguma propriedade do meu objeto\n            // get: function(target, prop, receiver) {}\n            get(target, prop, receiver) {\n                \n                /*\n                target: referência ao objeto original encapsulado pelo proxy\n                prop: a propriedade que está sendo acessada\n                receiver: referência para o próprio proxy\n                */\n                // Se o método incluído é o adiciona() ou o esvazia(), que tem ou não props e se é uma função, então...\n                if(props.includes(prop) && ProxyFactory._ehFuncao(target[prop])) {\n                    // Vou substitir a função no proxy por outra\n                    return function() {\n                        \n                        //console.log(`interceptando ${prop}`);\n                        // Com o Reflect.apply eu faço a função receber os parâmetros (lista de arguments) dela\n                        let retorno = Reflect.apply(target[prop], target, arguments);                        \n                        // Atualizo a view\n                        acao(target);\n\n                        return retorno; \n                    }\n                }\n\n                return Reflect.get(target, prop, receiver);\n            },\n\n            set(target, prop, value, receiver) {\n\n                let retorno = Reflect.set(target, prop, value, receiver);\n                // só executa acao(target) se for uma propriedade monitorada\n                if(props.includes(prop)) acao(target);    \n                return retorno; \n            }\n        });\n    };\n\n    static _ehFuncao(func) {\n        return typeof(func) == typeof(Function);\n    }\n}"]}